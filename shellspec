#!/bin/sh
#shellcheck disable=SC2004,SC2016

set -eu

export SHELLSPEC_VERSION='0.15.0'
export SHELLSPEC_PATH=''
export SHELLSPEC_ROOT=''
export SHELLSPEC_LIB=''
export SHELLSPEC_LIBEXEC=''
export SHELLSPEC_SPECDIR=''
export SHELLSPEC_LOAD_PATH=''
export SHELLSPEC_SHELL=''
export SHELLSPEC_TIME=''
export SHELLSPEC_TMPBASE=''
export SHELLSPEC_TIME_LOG=''
export SHELLSPEC_EXAMPLES_LOG=''
export SHELLSPEC_FORMATTER='progress'
export SHELLSPEC_GENERATORS=''
export SHELLSPEC_REPORTDIR=''
export SHELLSPEC_COLOR=''
export SHELLSPEC_REQUIRES=''
export SHELLSPEC_SPEC_FAILURE_CODE=101
export SHELLSPEC_UNEXPECTED_STDERR=102
export SHELLSPEC_SKIP_MESSAGE=none
export SHELLSPEC_WARNINGS=error
export SHELLSPEC_FAIL_FAST_COUNT=''
export SHELLSPEC_FAIL_NO_EXAMPLES=''
export SHELLSPEC_JOBS=0
export SHELLSPEC_DRYRUN=''
export SHELLSPEC_FOCUS_FILTER=''
export SHELLSPEC_TAG_FILTER=''
export SHELLSPEC_EXAMPLE_FILTER=''
export SHELLSPEC_BANNER=''
export SHELLSPEC_MODE='runner'
export SHELLSPEC_LIST=''
export SHELLSPEC_COUNT_FILE=''
export SHELLSPEC_ENV_FROM=''
export SHELLSPEC_PATTERN="*_spec.sh"
export SHELLSPEC_UNIXTIME=''
export SHELLSPEC_TMPDIR=${TMPDIR:-/tmp}
export SHELLSPEC_LOGFILE=/dev/tty
export SHELLSPEC_DEFAULT_PATH=spec
export SHELLSPEC_INFILE=file
export SHELLSPEC_RANDOM=''
export SHELLSPEC_SEED=''
export SHELLSPEC_ARITHMETIC_CHECK=1

readlinkf() {
  p=$1 i=0
  [ -L "${p%/}" ] && [ ! -e "${p%/}" ] && p=${p%/}
  while [ $i -lt 10 ]; do
    case $p in (*/*) cd "${p%/*}" 2>/dev/null || return 1; p=${p##*/}; esac
    [ ! -L "$p" ] && p=${PWD%/}${p:+/}$p && printf '%s\n' "${p:-/}" && return 0
    l=$(ls -dl "$p" 2>/dev/null) || return 1
    p=${l#*" $p -> "} i=$(($i+1))
  done
  return 1
}

SHELLSPEC_PATH=$(readlinkf "$0")
SHELLSPEC_ROOT="${SHELLSPEC_PATH%/*}"
SHELLSPEC_LIB="$SHELLSPEC_ROOT/lib"
SHELLSPEC_REPORTERLIB="$SHELLSPEC_LIB/libexec/reporter"

[ -t 1 ] && SHELLSPEC_COLOR=1

# shellcheck source=lib/libexec/shellspec.sh
. "$SHELLSPEC_LIB/libexec/shellspec.sh"

SHELLSPEC_LIBEXEC="$SHELLSPEC_ROOT/libexec"
SHELLSPEC_SPECDIR=$PWD/spec
SHELLSPEC_REPORTDIR=$PWD/report
SHELLSPEC_LOAD_PATH=$SHELLSPEC_SPECDIR:$SHELLSPEC_LIB:$SHELLSPEC_REPORTERLIB

SHELLSPEC_UNIXTIME=$(date +%s)
SHELLSPEC_TMPBASE="${SHELLSPEC_TMPDIR%/}/shellspec.$SHELLSPEC_UNIXTIME.$$"
SHELLSPEC_TIME_LOG="$SHELLSPEC_TMPBASE/time.log"
SHELLSPEC_EXAMPLES_LOG="$SHELLSPEC_TMPBASE/examples.log"
SHELLSPEC_BANNER="$SHELLSPEC_SPECDIR/banner"

SHELLSPEC_TIME="$SHELLSPEC_LIBEXEC/shellspec-time.sh"
if command_path time > /dev/null; then
  SHELLSPEC_TIME="time -p"
elif command_path bash > /dev/null; then
  SHELLSPEC_TIME="bash $SHELLSPEC_TIME"
elif command_path ksh > /dev/null; then
  SHELLSPEC_TIME="ksh $SHELLSPEC_TIME"
fi

usage() {
while IFS= read -r line; do echo "$line"; done <<USAGE
Usage: shellspec [options] [files or directories]

  -s, --shell SHELL                   Specify a path of shell [default: current shell]
      --[no-]fail-fast[=COUNT]        Abort the run after a certain number of failures [default: 1]
      --[no-]fail-no-examples         Fail if no examples found [default: disabled]
  -r, --require MODULE                Require a file
  -e, --env NAME=VALUE                Set environment variable
      --env-from ENV-SCRIPT           Set environment variable from script file
      --random TYPE[:SEED]            Run examples by the specified random type
                                        [none]      run in the defined order [default]
                                        [specfiles] randomize the order of specfiles
                                        [examples]  randomize the order of examples (slow)
  -j, --jobs JOBS                     Number of parallel jobs to run (0 jobs means disabled)
      --[no-]arithmetic-check         Ensure the shell has arithmetic expansion [default: enabled]
  -w, --warnings LEVEL                Set warnings level
                                        [none]    do not show warnings
                                        [notice]  show warnings but not treats as error
                                        [error]   show warnings and treats as error [default]
                                        [failure] treats warnings as failures
      --dry-run                       Print the formatter output without running any examples

  **** Output ****

      --[no-]banner                   Show banner if exist 'spec/banner' [default: enabled]
  -f, --format FORMATTER              Choose a formatter to use for display.
                                        [p]rogress      dots [default]
                                        [d]ocumentation group and example names
                                        [t]ap           TAP format
                                        [null]          do not display anything
                                        [debug]         for developer
                                        custom formatter name
      --force-color, --force-colour   Force the output to be in color, even if the output is not a TTY
      --no-color, --no-colour         Force the output to not be in color, even if the output is a TTY
      --skip-message VERBOSE          Mute skip message
                                        [none]     do not mute any messages [default]
                                        [moderate] mute repeated messages
                                        [quiet]    mute repeated messages and non-temporarily messages
  -o, --output GENERATOR              Choose a generator(s) to generate a report.
                                        [tap]           TAP format

  **** Ranges / Filters ****

    You can select examples range to run by appending the line numbers or id to the filename

      shellspec path/to/a_spec.sh:10:20     # Run the groups or examples that includes lines 10 and 20
      shellspec path/to/a_spec.sh:@1-5:@1-6 # Run the 5th and 6th groups/examples defined in the 1st group

    You can filter examples to run with the following options

      --focus                         Run focused groups / examples only
                                        To focus, prepend 'f' to groups / examples in specfiles
                                        e.g. Describe -> fDescribe, It -> fIt
      --pattern PATTERN               Load files matching pattern [default: "*_spec.sh"]
      --example PATTERN               Run examples whose names include PATTERN
      --tag TAG[:VALUE]               Run examples with the specified TAG
      --default-path PATH             Set the default path where shellspec looks for examples [defualt: "spec"]

  **** Utility ****

      --init                          Initialize your project with shellspec
      --count                         Count the number of specfiles and examples
      --list LIST                     List the specfiles / examples
                                        [specfiles]       list the specfiles
                                        [examples]        list the examples with id
                                        [examples:id]     alias for examples
                                        [examples:lineno] list the examples with lineno
                                        [debug]           for developer
                                        affected by --random but TYPE is ignored
      --syntax-check                  Syntax check of the specfiles without running any examples
      --translate                     Output translated specfile
      --task [TASK]                   Run task. If TASK is not specified, show the task list
  -v, --version                       Display the version
  -h, --help                          You're looking at it
USAGE
}

parse_options() {
  length=$# params=''
  while [ $# -gt 0 ]; do
    case $1 in
      --banner) SHELLSPEC_BANNER="$SHELLSPEC_SPECDIR/banner" ;;
      --no-banner) SHELLSPEC_BANNER='' ;;
      -f | --format) [ "${2:-}" ] || abort 'Require FORMATTER.'
        case $2 in (*[!a-z0-9_]*) abort 'Invalid FORMATTER name.'; esac
        SHELLSPEC_FORMATTER=$2
        for format in progress documentation tap; do
          case $format in ($2*) SHELLSPEC_FORMATTER=$format; esac
        done
        shift ;;
      -o | --output) [ "${2:-}" ] || abort 'Require GENERATOR.'
        case $2 in (*[!a-z0-9_]*) abort 'Invalid GENERATOR name.'; esac
        SHELLSPEC_GENERATORS="$SHELLSPEC_GENERATORS $2"
        shift ;;
      --force-color | --force-colour) SHELLSPEC_COLOR=1 ;;
      --no-color | --no-colour) SHELLSPEC_COLOR='' ;;
      -s | --shell) [ "${2:-}" ] || abort 'Require SHELL.'
        SHELLSPEC_SHELL=$2
        shift ;;
      --random) [ "${2:-}" ] || abort 'Require TYPE[:SEED].'
        case ${2%%:*} in
          none) SHELLSPEC_RANDOM='' ;;
          specfiles|examples) SHELLSPEC_RANDOM=${2%%:*} ;;
          *) abort 'Invalid TYPE[:SEED].'
        esac
        case $2 in (*:*) SHELLSPEC_SEED=${2#*:} ;; (*) SHELLSPEC_SEED=''; esac
        shift ;;
      -j | --jobs) [ "${2:-}" ] || abort 'Require JOBS.'
        SHELLSPEC_JOBS=$2
        shift ;;
      --arithmetic-check) SHELLSPEC_ARITHMETIC_CHECK=1 ;;
      --no-arithmetic-check) SHELLSPEC_ARITHMETIC_CHECK=0 ;;
      --dry-run) SHELLSPEC_DRYRUN=1 ;;
      --focus) SHELLSPEC_FOCUS_FILTER=1 ;;
      --pattern) [ "${2:-}" ] || abort 'Require PATTERN.'
        SHELLSPEC_PATTERN=$2
        shift ;;
      --example) [ "${2:-}" ] || abort 'Require PATTERN.'
        if [ "$SHELLSPEC_EXAMPLE_FILTER" ]; then
          SHELLSPEC_EXAMPLE_FILTER="$SHELLSPEC_EXAMPLE_FILTER|$2"
        else
          SHELLSPEC_EXAMPLE_FILTER="$2"
        fi
        shift ;;
      --tag) [ "${2:-}" ] || abort 'Require TAG.'
        SHELLSPEC_TAG_FILTER="${SHELLSPEC_TAG_FILTER%,},$2,"
        shift ;;
      --default-path) [ "${2:-}" ] || abort 'Require PATH.'
        SHELLSPEC_DEFAULT_PATH=$2
        shift ;;
      -e | --env) [ "${2:-}" ] || abort 'Require NAME=VALUE.'
        #shellcheck disable=SC2034
        case $2 in
          *=*) name=${2%%=*} value=${2#*=} ;;
          *) name=$2 value='' ;;
        esac
        case $name in ([!a-zA-Z_]*) abort 'Invalid environment name.'; esac
        case $name in (*[!a-zA-Z0-9_]*) abort 'Invalid environment name.'; esac
        eval "export $name=\$value"
        shift ;;
      --env-from) [ "${2:-}" ] || abort 'Require ENV-SCRIPT.'
        [ -e "$2" ] || abort "Not found ENV-SCRIPT '$2'."
        case $2 in
          /* | ./* | ../*) SHELLSPEC_ENV_FROM=$2 ;;
          *) SHELLSPEC_ENV_FROM="./$2" ;;
        esac
        shift ;;
      -r | --require) [ "${2:-}" ] || abort 'Require PATH.'
        SHELLSPEC_REQUIRES="$SHELLSPEC_REQUIRES${SHELLSPEC_REQUIRES:+:}$2"
        shift ;;
      -w | --warnings) [ "${2:-}" ] || abort 'Require LEVEL.'
        case $2 in (none|notice|error|failure) ;;
          *) abort 'Invalid LEVEL.'
        esac
        SHELLSPEC_WARNINGS="$2"
        shift ;;
      --skip-message) [ "${2:-}" ] || abort 'Require VERBOSE.'
        case $2 in (none|moderate|quiet) ;;
          *) abort 'Invalid VERBOSE.'
        esac
        SHELLSPEC_SKIP_MESSAGE="$2"
        shift ;;
      --fail-fast | --fail-fast=*)
        SHELLSPEC_FAIL_FAST_COUNT=${1#*=}
        case $SHELLSPEC_FAIL_FAST_COUNT in (*[!0-9]*)
          SHELLSPEC_FAIL_FAST_COUNT=1
        esac ;;
      --no-fail-fast) SHELLSPEC_FAIL_FAST_COUNT='' ;;
      --fail-no-examples) SHELLSPEC_FAIL_NO_EXAMPLES=1 ;;
      --no-fail-no-examples) SHELLSPEC_FAIL_NO_EXAMPLES='' ;;
      --init | --task | --translate | --syntax-check) SHELLSPEC_MODE=${1#--} ;;
      --count) SHELLSPEC_MODE=list SHELLSPEC_LIST='' ;;
      --list) [ "${2:-}" ] || abort 'Require LIST.'
        case $2 in (specfiles|examples|examples:id|examples:lineno|debug) ;;
          *) abort 'Invalid LIST.'
        esac
        SHELLSPEC_MODE=list SHELLSPEC_LIST=$2
        shift ;;
      -h | --help) usage && exit 0;;
      -v | --version) echo "$SHELLSPEC_VERSION" && exit 0 ;;
      -*) abort "Unknown option '$1'" ;;
      *) params="$params \"\${$(($length - $# + 1))}\""
    esac
    shift
  done
}

read_dot_file "${XDG_CONFIG_HOME:-}" "shellspec/options" parse_options
read_dot_file "${HOME:-}" ".shellspec" parse_options
read_dot_file "." ".shellspec" parse_options
read_dot_file "." ".shellspec-local" parse_options
[ $# -gt 0 ] && parse_options "$@" && eval "set -- $params"

[ "$SHELLSPEC_SHELL" ] || SHELLSPEC_SHELL=$(current_shell "$0" "$$")
if [ -z "$SHELLSPEC_SHELL" ]; then
  warn "Failed to detect the current shell," \
       "because the ps command does not exist or not compatible."
  warn "Use 'sh' instead. You can specify the shell with --shell option."
fi

shell=$(command_path "${SHELLSPEC_SHELL:-sh}") ||:
if ! [ -x "${shell%% *}" ]; then
  abort "Not found specified shell: $SHELLSPEC_SHELL"
fi
SHELLSPEC_SHELL=$shell

if [ $SHELLSPEC_ARITHMETIC_CHECK -eq 1 ] && ! $SHELLSPEC_SHELL -c 'exit $((0))' 2>/dev/null; then
  abort "Unsupported shell (require arithmetic expansion): $SHELLSPEC_SHELL"
fi

case $SHELLSPEC_MODE in (init | task) ;; (*)
  [ $# -eq 0 ] && set -- "$SHELLSPEC_DEFAULT_PATH"
  for p in "$@"; do
    [ -e "${p%%:*}" ] || abort "Not found path: ${p%%:*}"
    case $p in (*:*)
      [ -d "${p%%:*}" ] && abort "Invalid range for directory: $p"
      check_range "${p#*:}" || abort "Invalid range: $p"
    esac
  done
esac

case $SHELLSPEC_MODE in (runner | list)
  if [ "$SHELLSPEC_RANDOM" ] && [ ! "$SHELLSPEC_SEED" ]; then
    SHELLSPEC_SEED=$(( ($SHELLSPEC_UNIXTIME * $$ / 7 + $$) % 100000))
    info "Randomized with seed $SHELLSPEC_SEED" >&2
  fi
esac

if [ "$SHELLSPEC_ENV_FROM" ]; then
  exec="$SHELLSPEC_LIBEXEC/shellspec-load-env.sh"
else
  exec="$SHELLSPEC_LIBEXEC/shellspec-${SHELLSPEC_MODE}.sh"
fi
eval exec "$SHELLSPEC_SHELL" "\"$exec\"" ${1+'"$@"'}
